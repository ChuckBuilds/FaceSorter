# Stage 1: Build stage with CUDA development toolkit
FROM nvidia/cuda:11.8.0-devel-ubuntu20.04 AS builder

# Set environment variables to non-interactive
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    libopenblas-dev \
    liblapack-dev \
    libjpeg-dev \
    libpng-dev \
    python3 \
    python3-pip \
    python3-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set python3 as default python
RUN ln -s /usr/bin/python3 /usr/bin/python

# Create and set the working directory for the build
WORKDIR /app

# Copy requirements to install dependencies
COPY requirements.in .

# Set environment variable to force a CUDA-enabled build of dlib
ENV DLIB_USE_CUDA=1

# Clone dlib and build it from source. This is the most reliable method to ensure
# that it is compiled with CUDA support enabled, as the pip install process can be unreliable.
RUN git clone https://github.com/davisking/dlib.git && \
    cd dlib && \
    mkdir build && \
    cd build && \
    cmake .. -DDLIB_USE_CUDA=1 -DUSE_AVX_INSTRUCTIONS=1 && \
    cmake --build . --config Release && \
    cd .. && \
    python3 setup.py install

# Verify that dlib was compiled with CUDA support before proceeding.
RUN python3 -c "import dlib; assert dlib.DLIB_USE_CUDA, 'dlib was NOT built with CUDA support'"

# Install face-recognition without its dlib dependency.
# Then, install the rest of the python packages
RUN pip3 install --no-cache-dir --no-dependencies face-recognition && \
    pip3 install --no-cache-dir -r requirements.in
# ---

# Stage 2: Final runtime stage
FROM nvidia/cuda:11.8.0-runtime-ubuntu20.04

# Set environment variables to non-interactive
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

# Install only necessary runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libopenblas-dev \
    liblapack-dev \
    libjpeg-dev \
    libpng-dev \
    libx11-dev \
    libgtk-3-dev \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Set python3 as default python
RUN ln -s /usr/bin/python3 /usr/bin/python

# Create and set the working directory
WORKDIR /app

# Copy the installed python packages from the builder stage
COPY --from=builder /usr/local/lib/python3.8/dist-packages /usr/local/lib/python3.8/dist-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy the application source code into the container
COPY ./facesorter ./facesorter
COPY config.yaml .

# Expose the port the app runs on
EXPOSE 7860

# Define the command to run the application
CMD ["streamlit", "run", "facesorter/app.py", "--server.address=0.0.0.0", "--server.port=7860"] 